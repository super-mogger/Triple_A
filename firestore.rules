rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is accessing their own data
    function isUserOwned(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Validate payment data
    function isValidPayment() {
      let data = request.resource.data;
      return data.keys().hasAll(['amount', 'currency', 'status', 'userId', 'planId', 'createdAt', 'paymentMethod']) &&
        data.userId == request.auth.uid &&
        data.currency == 'INR' &&
        (data.status in ['completed', 'failed', 'cancelled']) &&
        (data.planId in ['monthly', 'quarterly', 'yearly']) &&
        data.paymentMethod == 'razorpay' &&
        data.amount is number &&
        data.amount > 0;
    }

    // Validate metadata
    function hasValidMetadata() {
      let data = request.resource.data;
      return data.metadata is map &&
        data.metadata.gateway == 'razorpay' &&
        (data.metadata.environment in ['development', 'production']);
    }

    // Allow users to read and write their own data
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isUserOwned(userId);
      
      // Allow users to update their own membership
      match /membership/{document=**} {
        allow read: if isUserOwned(userId);
        allow write: if isUserOwned(userId);
      }
    }
    
    // Allow users to read and write their own payments
    match /payments/{paymentId} {
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      
      // Allow creating new payments
      allow create: if isAuthenticated() && 
        isValidPayment() &&
        hasValidMetadata();
      
      // Never allow updates or deletes
      allow update, delete: if false;
    }
    
    // Allow users to read and write their own profile
    match /profiles/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Allow users to read their own membership details
    match /memberships/{membershipId} {
      allow read: if request.auth != null && resource.data.user_id == request.auth.uid;
      allow create: if true;  // Temporarily allow creation for testing
      allow update: if request.auth != null && resource.data.user_id == request.auth.uid;
      allow delete: if request.auth != null && resource.data.user_id == request.auth.uid;
    }

    // Payment history collection (for querying)
    match /payment-history/{userId} {
      allow read: if isUserOwned(userId);
      
      match /transactions/{transactionId} {
        allow read: if isUserOwned(userId);
      }
    }

    match /attendance/{document} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == request.resource.data.userId);
    }
    match /attendanceStats/{document} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == request.resource.data.userId);
    }
  }
}