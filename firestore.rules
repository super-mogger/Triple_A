rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && request.auth.token.admin == true;
    }

    // Helper function to check if user is accessing their own data
    function isUserOwned(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to check if user is trying to update photo fields
    function hasPhotoFields() {
      return request.resource.data.diff(resource.data).affectedKeys()
        .hasAny(['photoURL', 'avatar_url', 'aadhaarCardFrontURL', 'aadhaarCardBackURL']);
    }

    // Allow users to read and write their own data
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isUserOwned(userId) || isAdmin();
      
      // Allow users to update their own membership
      match /membership/{document=**} {
        allow read: if isUserOwned(userId) || isAdmin();
        allow write: if isUserOwned(userId) || isAdmin();
      }
    }

    // Allow users to read and write their own profile
    match /profiles/{userId} {
      allow read: if isAuthenticated();
      allow create: if isUserOwned(userId) || isAdmin();
      // Allow updates but restrict photo fields to admin only
      allow update: if isAdmin() || (isUserOwned(userId) && !hasPhotoFields());
      allow delete: if isAdmin();
    }

    // Allow users to read their own membership details
    match /memberships/{membershipId} {
      allow read: if isAuthenticated();
      allow create, update: if isAdmin() || 
        (isAuthenticated() && request.resource.data.userId == request.auth.uid);
      allow delete: if isAdmin();
    }

    // Diet Plans Collection
    match /dietPlans/{planId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
    }

    // Attendance Collection
    match /attendance/{attendanceId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        (request.auth.uid == request.resource.data.userId || isAdmin());
      allow update, delete: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || isAdmin());
    }
    
    // Attendance Stats Collection
    match /attendanceStats/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
      allow write: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
    }

    // Water Intake Collection
    match /waterIntake/{document} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.userId || 
        request.auth.uid == document.split('_')[0] ||
        isAdmin()
      );
      allow create: if isAuthenticated() && (
        request.auth.uid == request.resource.data.userId ||
        request.auth.uid == document.split('_')[0]
      );
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        request.auth.uid == document.split('_')[0] ||
        isAdmin()
      );
    }

    // Payment Collections
    match /payments/{paymentId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAdmin();
    }

    match /payment-history/{userId} {
      allow read: if isUserOwned(userId) || isAdmin();
      match /transactions/{transactionId} {
        allow read: if isUserOwned(userId) || isAdmin();
      }
    }
    
    // ADDED: Admin Collection for admin management
    match /admins/{adminId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }
  }
}
