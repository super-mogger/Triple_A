rules_version = '2';



service cloud.firestore {

  match /databases/{database}/documents {

    // Helper function to check if user is authenticated

    function isAuthenticated() {

      return request.auth != null;

    }



    // Helper function to check if user is admin

    function isAdmin() {

      return isAuthenticated() && request.auth.token.admin == true;

    }



    // Allow admins to read and write all documents

    match /{document=**} {

      allow read: if isAuthenticated();

      allow write: if isAdmin();

    }



    // Helper function to check if user is accessing their own data

    function isUserOwned(userId) {

      return isAuthenticated() && request.auth.uid == userId;

    }



    // Validate payment data

    function isValidPayment() {

      let data = request.resource.data;

      return data.keys().hasAll(['amount', 'currency', 'status', 'userId', 'planId', 'createdAt', 'paymentMethod']) &&

        data.userId == request.auth.uid &&

        data.currency == 'INR' &&

        (data.status in ['completed', 'failed', 'cancelled']) &&

        (data.planId in ['monthly', 'quarterly', 'yearly']) &&

        data.paymentMethod == 'razorpay' &&

        data.amount is number &&

        data.amount > 0;

    }



    // Validate metadata

    function hasValidMetadata() {

      let data = request.resource.data;

      return data.metadata is map &&

        data.metadata.gateway == 'razorpay' &&

        (data.metadata.environment in ['development', 'production']);

    }



    // Allow users to read and write their own data

    match /users/{userId} {

      allow read: if isAuthenticated();

      allow write: if isUserOwned(userId) || isAdmin();

      

      // Allow users to update their own membership

      match /membership/{document=**} {

        allow read: if isUserOwned(userId) || isAdmin();

        allow write: if isUserOwned(userId) || isAdmin();

      }

    }

    

    // Allow users to read and write their own payments

    match /payments/{paymentId} {

      allow read: if isAuthenticated() && 

        (resource.data.userId == request.auth.uid || isAdmin());

      

      // Allow creating new payments

      allow create: if isAuthenticated() && 

        (isValidPayment() || isAdmin());

      

      // Only allow admin to update or delete

      allow update, delete: if isAdmin();

    }

    

    // Allow users to read and write their own profile

    match /profiles/{userId} {

      allow read: if request.auth != null;

      allow write: if request.auth != null && request.auth.uid == userId;

    }



    // Allow users to read their own membership details

    match /memberships/{membershipId} {

      allow read: if isAuthenticated();

      allow write: if isAdmin();

    }



    // Payment history collection (for querying)

    match /payment-history/{userId} {

      allow read: if isUserOwned(userId) || isAdmin();

      

      match /transactions/{transactionId} {

        allow read: if isUserOwned(userId) || isAdmin();

      }

    }



    match /attendance/{attendanceId} {

      allow read: if isAuthenticated();

      allow write: if isAdmin();

    }

    

    match /attendanceStats/{document} {

      allow read, write: if isAuthenticated() && 

        (request.auth.uid == resource.data.userId || 

         request.auth.uid == request.resource.data.userId || 

         isAdmin());

    }



    // Allow users to read and write their own water intake data

    match /waterIntake/{document=**} {

      allow read, write: if request.auth != null && 

        request.auth.uid == resource.data.userId || 

        (request.method == 'create' && request.auth.uid == request.resource.data.userId);

    }

  }

}
